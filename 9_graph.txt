#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

struct Graph {
    int vertices;
    struct Node** adjacencyList;
};

struct Node* createNode(int data)
{
    struct Node* newNode = malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

struct Graph* createGraph(int vertices)
{
    struct Graph* graph = malloc(sizeof(struct Graph));
    graph->vertices = vertices;
    graph->adjacencyList = calloc(vertices, sizeof(struct Node*));
    return graph;
}

void addEdge(struct Graph* graph, int src, int dest)
{
    struct Node* newNode = createNode(dest);
    newNode->next = graph->adjacencyList[src];
    graph->adjacencyList[src] = newNode;

    newNode = createNode(src);
    newNode->next = graph->adjacencyList[dest];
    graph->adjacencyList[dest] = newNode;
}

void printGraph(struct Graph* graph)
{
    for (int i = 0; i < graph->vertices; ++i) {
        printf("Adjacency list for vertex %d: ", i);
        for (struct Node* current = graph->adjacencyList[i]; current; current = current->next) {
            printf("%d -> ", current->data);
        }
        printf("NULL\n");
    }
}

int main()
{
    int vertices, edges, src, dest;

    printf("Enter the number of vertices and edges: ");
    scanf("%d %d", &vertices, &edges);

    struct Graph* graph = createGraph(vertices);

    for (int i = 0; i < edges; ++i) {
        printf("Enter edge %d (source destination): ", i + 1);
        scanf("%d %d", &src, &dest);
        addEdge(graph, src, dest);
    }

    printf("\nAdjacency List Representation of the Graph:\n");
    printGraph(graph);

    return 0;
}